// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentCancellationService.Data;

#nullable disable

namespace PaymentCancellationService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PaymentCancellationService.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int>("NoOfTourist")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TouristId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TouristId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Cancellation", b =>
                {
                    b.Property<int>("CancellationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CancellationId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CancelDate")
                        .HasColumnType("date");

                    b.Property<string>("CancelReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CancellationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CancellationId");

                    b.HasIndex("BookingId");

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("Cname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CatId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("ModeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ModeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.PaymentMode", b =>
                {
                    b.Property<int>("ModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ModeId"));

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ModeId");

                    b.ToTable("PaymentMode");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<int?>("CancellationId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateOnly>("RefundDate")
                        .HasColumnType("date");

                    b.Property<string>("RefundStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RefundId");

                    b.HasIndex("CancellationId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Role", b =>
                {
                    b.Property<int>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Rid"));

                    b.Property<string>("Rname")
                        .HasColumnType("longtext");

                    b.HasKey("Rid");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourAgency", b =>
                {
                    b.Property<int>("TourAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TourAgencyId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AgencyEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("LiscenceNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("longtext");

                    b.Property<string>("TourAgencyName")
                        .HasColumnType("longtext");

                    b.Property<int?>("Uid")
                        .HasColumnType("int");

                    b.HasKey("TourAgencyId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("TourAgency");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourPackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Destination")
                        .HasColumnType("longtext");

                    b.Property<string>("Pname")
                        .HasColumnType("longtext");

                    b.Property<int?>("TourAgencyId")
                        .HasColumnType("int");

                    b.HasKey("PackageId");

                    b.HasIndex("CatId");

                    b.HasIndex("TourAgencyId");

                    b.ToTable("TourPackage");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("AvailableBookings")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ScheduleId");

                    b.HasIndex("PackageId");

                    b.ToTable("TourSchedule");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Tourist", b =>
                {
                    b.Property<int>("TouristId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TouristId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Fname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lname")
                        .HasColumnType("longtext");

                    b.Property<int?>("Uid")
                        .HasColumnType("int");

                    b.Property<int?>("UidNavigationUid")
                        .HasColumnType("int");

                    b.HasKey("TouristId");

                    b.HasIndex("UidNavigationUid");

                    b.ToTable("Tourist");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TouristDetail", b =>
                {
                    b.Property<int>("TravellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TravellerId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("IdProof")
                        .HasColumnType("longtext");

                    b.Property<string>("Lname")
                        .HasColumnType("longtext");

                    b.HasKey("TravellerId");

                    b.HasIndex("BookingId");

                    b.ToTable("TouristDetail");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Uid"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("longtext");

                    b.Property<int>("Rid")
                        .HasColumnType("int");

                    b.Property<int>("RidNavigationRid")
                        .HasColumnType("int");

                    b.Property<string>("Uname")
                        .HasColumnType("longtext");

                    b.HasKey("Uid");

                    b.HasIndex("RidNavigationRid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Booking", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.TourSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("PaymentCancellationService.Models.Tourist", "Tourist")
                        .WithMany("Bookings")
                        .HasForeignKey("TouristId");

                    b.Navigation("Schedule");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Cancellation", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.Booking", "Booking")
                        .WithMany("Cancellations")
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Payment", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId");

                    b.HasOne("PaymentCancellationService.Models.PaymentMode", "Mode")
                        .WithMany("Payments")
                        .HasForeignKey("ModeId");

                    b.Navigation("Booking");

                    b.Navigation("Mode");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Refund", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.Cancellation", "Cancellation")
                        .WithMany("Refunds")
                        .HasForeignKey("CancellationId");

                    b.HasOne("PaymentCancellationService.Models.Payment", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Cancellation");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourAgency", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.User", "UidNavigation")
                        .WithOne("TourAgency")
                        .HasForeignKey("PaymentCancellationService.Models.TourAgency", "Uid");

                    b.Navigation("UidNavigation");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourPackage", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.Category", "Cat")
                        .WithMany("TourPackages")
                        .HasForeignKey("CatId");

                    b.HasOne("PaymentCancellationService.Models.TourAgency", "TourAgency")
                        .WithMany("TourPackages")
                        .HasForeignKey("TourAgencyId");

                    b.Navigation("Cat");

                    b.Navigation("TourAgency");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourSchedule", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.TourPackage", "Package")
                        .WithMany("TourSchedules")
                        .HasForeignKey("PackageId");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Tourist", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.User", "UidNavigation")
                        .WithMany("Tourists")
                        .HasForeignKey("UidNavigationUid");

                    b.Navigation("UidNavigation");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TouristDetail", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.Booking", "Booking")
                        .WithMany("TouristDetails")
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.User", b =>
                {
                    b.HasOne("PaymentCancellationService.Models.Role", "RidNavigation")
                        .WithMany("Users")
                        .HasForeignKey("RidNavigationRid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RidNavigation");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Booking", b =>
                {
                    b.Navigation("Cancellations");

                    b.Navigation("Payments");

                    b.Navigation("TouristDetails");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Cancellation", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Category", b =>
                {
                    b.Navigation("TourPackages");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Payment", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.PaymentMode", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourAgency", b =>
                {
                    b.Navigation("TourPackages");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourPackage", b =>
                {
                    b.Navigation("TourSchedules");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.TourSchedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.Tourist", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PaymentCancellationService.Models.User", b =>
                {
                    b.Navigation("TourAgency");

                    b.Navigation("Tourists");
                });
#pragma warning restore 612, 618
        }
    }
}
